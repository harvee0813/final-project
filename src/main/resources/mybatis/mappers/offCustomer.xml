<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.example.cus.mapper.OffCusMapper">

	<insert id="insertCustomer" parameterType="com.example.cus.vo.Customer">
		insert into customers
			(customer_id, customer_type, customer_deleted, customer_name, customer_zipcode, customer_basic_address, 
			customer_detail_address, customer_phone, customer_email)
		values
			(#{id}, #{type}, #{deleted}, #{name}, #{zipcode}, #{basicAddress}, #{detailAddress}, #{phone}, #{email})
	</insert>
	
	<select id="getTotalRows" parameterType="map" resultType="int">
		select
			count(*)
		from
			customers
		<where>
			<if test="keyword != null">
				customer_name = #{keyword}
			</if>
		</where>
	</select>
	
	<!-- 고객목록 -->
	<select id="getCustomers" parameterType="map" resultType="OffCusListDto">
		select 
			customer_id as id,
			customer_type as type,
			customer_name as name,
			customer_phone as phone,
			customer_email as email
		from (
			select
				row_number() over (order by customer_created_date desc) row_numbers,
				customer_id,
				customer_type,
				customer_name,
				customer_phone,
				customer_email
			from
				customers
			where
				customer_deleted = 'N'
				<if test="keyword != null">
					and customer_name = #{keyword}
				</if>
		)
		where
			row_numbers between #{begin} and #{end}
	</select>
	
	<!-- 고객 상세정보 -->
	<select id="getCustomerDetailById" parameterType="String" resultType="OffCusDetailDto">
		select
			customer_id 			as id,
			customer_type 			as type,
			customer_name 			as name,
			customer_phone 			as phone,
			customer_email 			as email,
			customer_zipcode 		as zipcode,
			customer_basic_address 	as basicAddress,
			customer_detail_address as detailAddress
			
		from
			customers
		where
			customer_type = 'off' and
			customer_deleted = 'N' and
			customer_id = #{value}
	</select>
	
	<select id="getCustomerById" parameterType="String" resultType="Customer">
		select
			customer_id	as id,
			customer_name as name,
			customer_phone as phone,
			customer_email as email,
			customer_deleted as deleted,
			customer_zipcode as zipcode,
			customer_basic_address as basicAddress,
			customer_detail_address as detailAddress
		from
			customers
		where
			customer_id = #{value}
	</select>
	
	<update id="updateCustomer" parameterType="Customer">
		update
			customers
		<set>
			customer_name = #{name},
			customer_phone = #{phone},
			customer_email = #{email},
			customer_zipcode = #{zipcode},
			customer_basic_address = #{basicAddress},
			customer_detail_address = #{detailAddress},
			<if test="deleted != null">
				customer_deleted = #{deleted}
			</if>
		</set>
			
		where
			customer_id = #{id}
	</update>
	
	<delete id="deleteCustomer" parameterType="String">
		delete from
			customers
		where
			customer_id = #{value}
	</delete>
</mapper>
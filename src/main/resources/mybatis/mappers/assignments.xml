<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.example.emp.mapper.RepairMapper">

	<!-- 
		배정 리스트 총 갯수 - int getTotalRows()
	 -->
	<select id="getTotalRows" resultType="int">
		select
			count(*)
		from
			service_registrations A, device_as_histories B
		where
			A.registration_no = B.registration_no				
	</select>

	<!-- 
		배정 리스트 - List<AssignListDto> getAssignList(Map<String, Object> param)
	 -->
	<select id="getAssignList" parameterType="map" resultType="AssignListDto">
		select
			registration_no				as no,
			customer_id					as id,
			customer_name				as name,
			employee_no					as empNo,
			employee_name				as empName,
			registration_date			as registrationDate,
			service_assignment_status	as assignStatus
		from (	
			select
				row_number() over (order by B.registration_date desc) row_numbers, 
			    B.registration_no,
			    C.customer_id,
			    C.customer_name,
			    E.employee_no,
			    E.employee_name,
			    B.registration_date,
			    A.service_assignment_status
			from device_as_histories A, Service_registrations B, Customers C,
			     service D, employees E
			where B.registration_date between trunc(sysdate - 30) and trunc(sysdate + 1)
				and A.registration_no = B.registration_no 
				and B.customer_id = C.customer_id 
				and A.service_no = D.service_no (+)
				and D.employee_no = E.employee_no (+)
			)
		where
			row_numbers between #{begin} and #{end}					
	</select>
	
	<!-- 
		배정상세 조회 - AssignDetailDto getAssignDetailByNo(String no)
	 -->
	<select id="getAssignDetailByNo" parameterType="int" resultType="AssignDetailDto">
		select   
			A.service_no as serviceNo,  
			C.customer_name as name,
			B.registration_date as registrationDate,
			(select employee_no from employees where employee_no = D.employee_no) as empNo,
            (select employee_name from employees where employee_no = D.employee_no) as empName,
			B.reservation_date as reservationDate,
			B.reservation_hour as reservationHour,
			F.service_cat_name as serviceCatName
		from 
			device_as_histories A, service_registrations B, Customers C,
			service D, service_categories F   
		where 
			B.registration_no = #{value}
			and B.registration_no = A.registration_no
			and B.customer_id = C.customer_id
			and A.service_no = D.service_no(+)
			and B.service_cat_no = F.service_cat_no
	</select>
	
	<!-- 
		예약일자와 예약시간으로 배정직원들 조회 - AsEmpDto getAssignEmployees(Map<String, Object> param)
	 --> 
	<select id="getAssignEmployees" parameterType="map" resultType="AsEmpDto">
		select 
			employee_no as empNo,
			employee_name as empName
		from 
			employees
		where 
			employee_no in (select employee_no
		                    from employees
		                    minus
		                    select employee_no
		                    from  service 
		                    where service_assignment_date = #{date}
		                    and  service_assignment_hour = #{hour})
	</select>
	
	<!-- 
		배정직원목록 조회 - List<AllAsEmpDto> getAllAsEmp(int deptNo)
	 
	<select id="getAllAsEmp" parameterType="int" resultType="AsEmpDto">
		select
			A.employee_no as empNo,
			A.employee_name as empName,
			B.dept_no as deptNo 
		from
			employees A, departments B
		where
			B.dept_no = #{value}
	</select>
	-->
	
	<!-- 
		직원 배정 - void insertAssign(AssignService assignService);
	 -->
	<insert id="insertAssign" parameterType="AssignService">
		insert into service
			(service_no, employee_no)
		values
			(#{serviceNo}, #{empNo})	
	</insert>
	
	<!-- 
		서비스번호로 서비스이력 조회 - DeviceASHistory getHistoryByNo(int serviceNo);
	 -->
	<select id="getHistoryByNo" parameterType="int" resultType="DeviceASHistory">
		select
			service_no	as serviceNo,
			process_status as processStatus,
			service_assignment_status as assignStatus,
			service_request_content as content,
			process_expected_date as expectedDate,
			process_fail_description as failDescription,
			process_description as description,
			process_completed_date as completedDate,
			service_cost as serviceCost,
			registration_no as registrationNo
		from
			device_as_histories
		where
			service_no = #{value}		
	</select>

	<!-- 
		서비스이력 수정 void updateAsHistory(DeviceASHistory history);
	 -->
	<update id="updateAsHistory" parameterType="DeviceASHistory">
		update
			device_as_histories
		set
			service_assignment_status = #{assignStatus},
			process_status = #{processStatus},
			process_description = #{description},
			service_cost = #{serviceCost}
		where
			service_no = #{serviceNo}
	</update>			
	 
	<!-- 
		서비스 배정시간 목록 - List<AssignHour> getAssignHour(Map<String, Object> param)
	 	 
	<select id="getAssignHour" parameterType="map" resultType="AssignHour">
		select
			start_hour as startHour
		from
			service_times
		minus
		select 
			A.service_assignment_hour	
		from
			service A, employees B, Service_registrations C, device_as_histories D
		where
			B.emp_no = #{empNo} and C.reservation_date = #{reservationDate}	
			and A.service_no = D.service_no
			and B.employee_no = A.employee_no
			and C.registration_no = D.registration_no 	
	</select>
	-->

</mapper>